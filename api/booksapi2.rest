@baseUrl = http://localhost:5000/api
@authToken = your_jwt_token_here
@user=2ab13a60-d717-4eba-8946-5ec967b0ae54
@book_id = 677320f8bc58fff076973e8b
@chapter_id = 6776f464f191a620c6c45f7a
@user=user123

@voice_id = 677c7abf4bb345a7602f2dce

@user_id = 2ab13a60-d717-4eba-8946-5ec967b0ae54

###! stat
GET {{baseUrl}}/books/count/total
###
GET {{baseUrl}}/books/count/monthly 
### 12 month stat
GET {{baseUrl}}/books/stats/monthly-totals

###! history
### Test Create History
POST {{baseUrl}}/books/histories
Content-Type: application/json

{
    "user": "{{user_id}}",
    "chapter": "{{chapter_id}}",
    "voice": "{{voice_id}}"
}

### Last Used Voice From Histories
GET {{baseUrl}}/books/histories/user/{{user_id}}/last-voice
### Get Histories by Book ID
GET {{baseUrl}}/books/histories/book/{{book_id}}
### Get most used voice
GET {{baseUrl}}/books/histories/book/{{book_id}}/most-used-voice

###todo uneeded this function so can del it
## Test Get All Histories
GET {{baseUrl}}/books/histories/history 

# ! need fix this func (when get history by user id => need to return list book id => return list book)
### Test Get Histories by User ID
GET {{baseUrl}}/books/histories/user/{{user_id}}
### Get histories books by user id
GET {{baseUrl}}/books/histories/user/{{user_id}}/books
### Expected Response:
# [
#   {
#     "id": "65f2d1a4e774a12345678901",
#     "user": "user123",
#     "chapter": {
#       "id": "6776f464f191a620c6c45f7a",
#       "chapter_number": 1,
#       "name": "Chapter One",
#       "book": "677320f8bc58fff076973e8b"
#     },
#     "voice": "voice123",
#     "created_at": "2024-03-14T12:00:00.000Z"
#   }
# ]

###! library
GET {{baseUrl}}/books/libraries/user/{{user_id}}
# ### Test Create Library
# POST {{baseUrl}}/books/libraries
# Content-Type: application/json

# {
#     "user": "user123",
#     "name": "My Favorite Books",
#     "books": ["{{book_id}}"]
# }

### Create Library
POST {{baseUrl}}/books/libraries
Content-Type: application/json

{
    "user": "{{user_id}}",
    "name": "Book that i love 3"
}
###
@library_id = 677d0e117f21109253437e8d
# ### Update Library
# PUT {{baseUrl}}/books/libraries/{{library_id}}
# Content-Type: application/json

# {
#     "name": "Updated Library Name",
#     "books": ["{{book_id}}"]
# }

### Get Library by ID
GET {{baseUrl}}/books/libraries/{{library_id}}

### Delete Library
DELETE {{baseUrl}}/books/libraries/{{library_id}}
###! Rating
## Create Rating
# POST {{baseUrl}}/books/ratings
# Content-Type: application/json

# {
#     "user": "{{user_id}}",
#     "book": "{{book_id}}",
#     "star": 4,
#     "review": "Not bad"
# }

### Get Ratings by Book ID
GET {{baseUrl}}/books/ratings/{{book_id}}

###! Comment
# Test Create Comment
POST {{baseUrl}}/books/chapters/comments
Content-Type: application/json

{
    "content": "That's a nice CHAPTER",
    "user": "{{user_id}}",
    "chapter": "{{chapter_id}}"
}

### Get Comments by Chapter ID
GET {{baseUrl}}/books/chapters/{{chapter_id}}/comments

###! Chapter
###
GET {{baseUrl}}/books/chapters/{{chapter_id}}

### Get Chapters by Book ID
GET {{baseUrl}}/books/{{book_id}}/chapters

### Get Chapter by ID
GET {{baseUrl}}/books/chapters/{{chapter_id}}

### Create Chapter (Success)
# POST {{baseUrl}}/books/chapters
# Content-Type: application/json

# {
#     "chapter_number": 3,
#     "name": "The Third Chapter",
#     "book": "{{book_id}}"
# }

### Create Chapter (Invalid Book ID)
# POST {{baseUrl}}/books/chapters
# Content-Type: application/json

# {
#     "chapter_number": 1,
#     "name": "The Beginning",
#     "book": "invalid_id"
# }

### Create Chapter (Missing Fields)
# POST {{baseUrl}}/books/chapters
# Content-Type: application/json

# {
#     "name": "The Beginning",
#     "book": "{{book_id}}"
# }

###! Book
# POST {{baseUrl}}/books
# Content-Type: application/json

# {
#     "title": "Harry Potter and the Phoenix Club",
#     "author": "{{author_id}}",
#     "genres": ["{{genre_id}}"],
#     "description": "The first book in the Harry Potter series",
#     "publish_year": 1997,
#     "status": "published"
# }
# router.get('/books/sort/monthly', bookController.getBooksByMonthly);
# router.get('/books/sort/views', bookController.getBooksByViews);
###! get sorted Books by smt => need to merge that func
### Get Books Sorted By Monthly Views
GET {{baseUrl}}/books/sort/monthly

### Get Books Sorted By Total Views  
GET {{baseUrl}}/books/sort/views
### Get Books Sorted By Created Time
GET {{baseUrl}}/books/sort/created

### Get Books Sorted By Updated Time
GET {{baseUrl}}/books/sort/updated
### Get All Books (Default)
GET {{baseUrl}}/books

### Get All Books (With Pagination)
GET {{baseUrl}}/books?page=1&limit=1

### Get All Books (With Filters)
GET {{baseUrl}}/books?status=published&genre=677309638abadf89895080ac

### Get All Books (With Search)
GET {{baseUrl}}/books?search=Harry Potter

### Get All Books (With Author Filter)
GET {{baseUrl}}/books?author=6773027d285f7dcbe1511e19

### Get Book by Valid ID
@book_id = 67730f4ef07dbd4c85765d56
GET {{baseUrl}}/books/book/{{book_id}}

### Get Book by Invalid ID
# GET {{baseUrl}}/books/book/invalid_id

### Get Book (Not Found)
# GET {{baseUrl}}/books/book/677309638abadf89895080ff

###! Author
# ## Create Author (Success)
# POST {{baseUrl}}/books/authors
# Content-Type: application/json

# {
#     "pen_name": "Nguyễn Nhật Ánh",
#     "name": "Nguyễn Nhật Ánh",
#     "description": "Nhà văn thiếu nhi nổi tiếng Việt Nam"
# }

### Get All Authors (Default)
GET {{baseUrl}}/books/authors

### Get All Authors (With Pagination)
# GET {{baseUrl}}/books/authors?page=1&limit=10

### Get Author by Valid ID
@author_id = 6773027d285f7dcbe1511e19
GET {{baseUrl}}/books/authors/{{author_id}}


POST {{baseUrl}}/books/genres
Content-Type: application/json

{
    "name": "Fantasy",
    "description": "Fantasy literature is a genre that typically features magical and supernatural elements"
}

### Create Genre (Vietnamese)
POST {{baseUrl}}/books/genres
Content-Type: application/json

{
    "name": "Tiểu thuyết",
    "description": "Thể loại văn học dài hơi"
}

###! genres
### Get All Genres
### Create Genre
# POST {{baseUrl}}/books/genres
# Content-Type: application/json

# {
#     "name": "Fantasy",
#     "description": "Fantasy literature is a genre that typically features magical and supernatural elements"
# }

### Get All Genres
GET {{baseUrl}}/books/genres

### Get All Genres (With Pagination)
GET {{baseUrl}}/books/genres?page=1&limit=10

### Get Genre by ID
@genre_id = 677309638abadf89895080ac
GET {{baseUrl}}/books/genres/{{genre_id}}
